export const infiltrationAbi = [
  {
    inputs: [
      {
        components: [
          { internalType: 'address', name: 'owner', type: 'address' },
          { internalType: 'string', name: 'name', type: 'string' },
          { internalType: 'string', name: 'symbol', type: 'string' },
          { internalType: 'uint256', name: 'price', type: 'uint256' },
          { internalType: 'uint256', name: 'maxSupply', type: 'uint256' },
          { internalType: 'uint256', name: 'maxMintPerAddress', type: 'uint256' },
          { internalType: 'uint256', name: 'blocksPerRound', type: 'uint256' },
          { internalType: 'uint256', name: 'agentsToWoundPerRoundInBasisPoints', type: 'uint256' },
          { internalType: 'uint256', name: 'roundsToBeWoundedBeforeDead', type: 'uint256' },
          { internalType: 'address', name: 'looks', type: 'address' },
          { internalType: 'address', name: 'vrfCoordinator', type: 'address' },
          { internalType: 'bytes32', name: 'keyHash', type: 'bytes32' },
          { internalType: 'uint64', name: 'subscriptionId', type: 'uint64' },
          { internalType: 'address', name: 'transferManager', type: 'address' },
          { internalType: 'uint256', name: 'healBaseCost', type: 'uint256' },
          { internalType: 'address', name: 'protocolFeeRecipient', type: 'address' },
          { internalType: 'uint16', name: 'protocolFeeBp', type: 'uint16' },
          { internalType: 'address', name: 'weth', type: 'address' },
          { internalType: 'string', name: 'baseURI', type: 'string' },
        ],
        internalType: 'struct IInfiltration.ConstructorCalldata',
        name: 'constructorCalldata',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  { inputs: [], name: 'ApprovalCallerNotOwnerNorApproved', type: 'error' },
  { inputs: [], name: 'ApprovalQueryForNonexistentToken', type: 'error' },
  { inputs: [], name: 'BalanceQueryForZeroAddress', type: 'error' },
  { inputs: [], name: 'ERC20TransferFail', type: 'error' },
  { inputs: [], name: 'ExceededTotalSupply', type: 'error' },
  { inputs: [], name: 'FrontrunLockIsOn', type: 'error' },
  { inputs: [], name: 'GameAlreadyBegun', type: 'error' },
  { inputs: [], name: 'GameIsStillRunning', type: 'error' },
  { inputs: [], name: 'GameNotYetBegun', type: 'error' },
  { inputs: [], name: 'GameOver', type: 'error' },
  { inputs: [], name: 'HealingDisabled', type: 'error' },
  { inputs: [], name: 'Immutable', type: 'error' },
  { inputs: [], name: 'InexactNativeTokensSupplied', type: 'error' },
  {
    inputs: [
      { internalType: 'uint256', name: 'agentId', type: 'uint256' },
      { internalType: 'enum IInfiltration.AgentStatus', name: 'expectedStatus', type: 'uint8' },
    ],
    name: 'InvalidAgentStatus',
    type: 'error',
  },
  { inputs: [], name: 'InvalidHealingRoundsDelay', type: 'error' },
  { inputs: [], name: 'InvalidMaxSupply', type: 'error' },
  { inputs: [], name: 'InvalidMintPeriod', type: 'error' },
  { inputs: [], name: 'InvalidPlacement', type: 'error' },
  { inputs: [], name: 'InvalidRandomnessRequestId', type: 'error' },
  { inputs: [], name: 'MaximumHealingRequestPerRoundExceeded', type: 'error' },
  { inputs: [], name: 'MintAlreadyStarted', type: 'error' },
  { inputs: [], name: 'MintCanOnlyBeExtended', type: 'error' },
  { inputs: [], name: 'MintERC2309QuantityExceedsLimit', type: 'error' },
  { inputs: [], name: 'MintStartIsInThePast', type: 'error' },
  { inputs: [], name: 'MintToZeroAddress', type: 'error' },
  { inputs: [], name: 'MintZeroQuantity', type: 'error' },
  { inputs: [], name: 'NoAgentsLeft', type: 'error' },
  { inputs: [], name: 'NoAgentsProvided', type: 'error' },
  { inputs: [], name: 'NoOngoingTransferInProgress', type: 'error' },
  { inputs: [], name: 'NotAContract', type: 'error' },
  { inputs: [], name: 'NotAgentOwner', type: 'error' },
  { inputs: [], name: 'NotEnoughMinted', type: 'error' },
  { inputs: [], name: 'NotInMintPeriod', type: 'error' },
  { inputs: [], name: 'NotOwner', type: 'error' },
  { inputs: [], name: 'NothingToClaim', type: 'error' },
  {
    inputs: [
      { internalType: 'address', name: 'have', type: 'address' },
      { internalType: 'address', name: 'want', type: 'address' },
    ],
    name: 'OnlyCoordinatorCanFulfill',
    type: 'error',
  },
  { inputs: [], name: 'OwnerQueryForNonexistentToken', type: 'error' },
  { inputs: [], name: 'OwnershipNotInitializedForExtraData', type: 'error' },
  { inputs: [], name: 'ProtocolFee__InvalidValue', type: 'error' },
  { inputs: [], name: 'RandomnessRequestAlreadyExists', type: 'error' },
  { inputs: [], name: 'ReentrancyFail', type: 'error' },
  { inputs: [], name: 'RenouncementNotInProgress', type: 'error' },
  { inputs: [], name: 'RoundsToBeWoundedBeforeDeadTooLow', type: 'error' },
  { inputs: [], name: 'StillMinting', type: 'error' },
  { inputs: [], name: 'TooEarlyToRetryRandomnessRequest', type: 'error' },
  { inputs: [], name: 'TooEarlyToStartNewRound', type: 'error' },
  { inputs: [], name: 'TooManyMinted', type: 'error' },
  { inputs: [], name: 'TransferAlreadyInProgress', type: 'error' },
  { inputs: [], name: 'TransferCallerNotOwnerNorApproved', type: 'error' },
  { inputs: [], name: 'TransferFromIncorrectOwner', type: 'error' },
  { inputs: [], name: 'TransferNotInProgress', type: 'error' },
  { inputs: [], name: 'TransferToNonERC721ReceiverImplementer', type: 'error' },
  { inputs: [], name: 'TransferToZeroAddress', type: 'error' },
  { inputs: [], name: 'URIQueryForNonexistentToken', type: 'error' },
  { inputs: [], name: 'WoundedAgentIdsPerRoundExceeded', type: 'error' },
  { inputs: [], name: 'WrongPotentialOwner', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },
      { indexed: true, internalType: 'address', name: 'approved', type: 'address' },
      { indexed: true, internalType: 'uint256', name: 'tokenId', type: 'uint256' },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },
      { indexed: true, internalType: 'address', name: 'operator', type: 'address' },
      { indexed: false, internalType: 'bool', name: 'approved', type: 'bool' },
    ],
    name: 'ApprovalForAll',
    type: 'event',
  },
  { anonymous: false, inputs: [], name: 'CancelOwnershipTransfer', type: 'event' },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'uint256', name: 'fromTokenId', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'toTokenId', type: 'uint256' },
      { indexed: true, internalType: 'address', name: 'from', type: 'address' },
      { indexed: true, internalType: 'address', name: 'to', type: 'address' },
    ],
    name: 'ConsecutiveTransfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'ethAmount', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'looksAmount', type: 'uint256' },
    ],
    name: 'EmergencyWithdrawal',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      { indexed: false, internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' },
      { indexed: false, internalType: 'uint256[]', name: 'rewards', type: 'uint256[]' },
    ],
    name: 'Escaped',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      {
        components: [
          { internalType: 'uint256', name: 'agentId', type: 'uint256' },
          { internalType: 'enum IInfiltration.HealOutcome', name: 'outcome', type: 'uint8' },
        ],
        indexed: false,
        internalType: 'struct IInfiltration.HealResult[]',
        name: 'healResults',
        type: 'tuple[]',
      },
    ],
    name: 'HealRequestFulfilled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      { indexed: false, internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' },
      { indexed: false, internalType: 'uint256[]', name: 'costs', type: 'uint256[]' },
    ],
    name: 'HealRequestSubmitted',
    type: 'event',
  },
  { anonymous: false, inputs: [], name: 'InitiateOwnershipRenouncement', type: 'event' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'address', name: 'previousOwner', type: 'address' },
      { indexed: false, internalType: 'address', name: 'potentialOwner', type: 'address' },
    ],
    name: 'InitiateOwnershipTransfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'requestId', type: 'uint256' },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'randomnessRequestRoundId',
        type: 'uint256',
      },
      { indexed: false, internalType: 'uint256', name: 'currentRoundId', type: 'uint256' },
    ],
    name: 'InvalidRandomnessFulfillment',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      { indexed: false, internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' },
    ],
    name: 'Killed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'mintStart', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'mintEnd', type: 'uint256' },
    ],
    name: 'MintPeriodUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'NewOwner',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'agentId', type: 'uint256' },
      { indexed: false, internalType: 'address', name: 'currency', type: 'address' },
      { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
    ],
    name: 'PrizeClaimed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'uint16', name: 'protocolFeeBp', type: 'uint16' }],
    name: 'ProtocolFeeBpUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'address', name: 'protocolFeeRecipient', type: 'address' },
    ],
    name: 'ProtocolFeeRecipientUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'requestId', type: 'uint256' },
    ],
    name: 'RandomnessFulfilled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'requestId', type: 'uint256' },
    ],
    name: 'RandomnessRequested',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' }],
    name: 'RoundStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'from', type: 'address' },
      { indexed: true, internalType: 'address', name: 'to', type: 'address' },
      { indexed: true, internalType: 'uint256', name: 'tokenId', type: 'uint256' },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      { indexed: false, internalType: 'uint256', name: 'agentId', type: 'uint256' },
    ],
    name: 'Won',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'uint256', name: 'roundId', type: 'uint256' },
      { indexed: false, internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' },
    ],
    name: 'Wounded',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AGENTS_TO_WOUND_PER_ROUND_IN_BASIS_POINTS',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'BLOCKS_PER_ROUND',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'HEAL_BASE_COST',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAXIMUM_PROTOCOL_FEE_BP',
    outputs: [{ internalType: 'uint16', name: '', type: 'uint16' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_MINT_PER_ADDRESS',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MAX_SUPPLY',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'PRICE',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'agentId', type: 'uint256' }],
    name: 'agentIndex',
    outputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'agentsAlive',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'minter', type: 'address' }],
    name: 'amountMintedPerAddress',
    outputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'uint256', name: 'tokenId', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'cancelOwnershipTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'claimGrandPrize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'agentId', type: 'uint256' }],
    name: 'claimSecondaryPrizes',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'requestId', type: 'uint256' }],
    name: 'closeRound',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmOwnershipRenouncement',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'confirmOwnershipTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' }],
    name: 'costToHeal',
    outputs: [{ internalType: 'uint256', name: 'cost', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'emergencyWithdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' }],
    name: 'escape',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'escapeMultiplier',
    outputs: [{ internalType: 'uint256', name: 'multiplier', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' }],
    name: 'escapeReward',
    outputs: [{ internalType: 'uint256', name: 'reward', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'escapeRewardSplitForSecondaryPrizePool',
    outputs: [{ internalType: 'uint256', name: 'split', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'gameInfo',
    outputs: [
      { internalType: 'uint16', name: 'activeAgents', type: 'uint16' },
      { internalType: 'uint16', name: 'woundedAgents', type: 'uint16' },
      { internalType: 'uint16', name: 'healingAgents', type: 'uint16' },
      { internalType: 'uint16', name: 'deadAgents', type: 'uint16' },
      { internalType: 'uint16', name: 'escapedAgents', type: 'uint16' },
      { internalType: 'uint40', name: 'currentRoundId', type: 'uint40' },
      { internalType: 'uint40', name: 'currentRoundBlockNumber', type: 'uint40' },
      { internalType: 'uint40', name: 'randomnessLastRequestedAt', type: 'uint40' },
      { internalType: 'uint256', name: 'prizePool', type: 'uint256' },
      { internalType: 'uint256', name: 'secondaryPrizePool', type: 'uint256' },
      { internalType: 'uint256', name: 'secondaryLooksPrizePool', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],
    name: 'getAgent',
    outputs: [
      {
        components: [
          { internalType: 'uint16', name: 'agentId', type: 'uint16' },
          { internalType: 'enum IInfiltration.AgentStatus', name: 'status', type: 'uint8' },
          { internalType: 'uint40', name: 'woundedAt', type: 'uint40' },
          { internalType: 'uint16', name: 'healCount', type: 'uint16' },
        ],
        internalType: 'struct IInfiltration.Agent',
        name: 'agent',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'roundId', type: 'uint256' }],
    name: 'getRoundInfo',
    outputs: [
      { internalType: 'uint256[]', name: 'woundedAgentIds', type: 'uint256[]' },
      { internalType: 'uint256[]', name: 'healingAgentIds', type: 'uint256[]' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256[]', name: 'agentIds', type: 'uint256[]' }],
    name: 'heal',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'healingRoundsDelay', type: 'uint256' }],
    name: 'healProbability',
    outputs: [{ internalType: 'uint256', name: 'y', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initiateOwnershipRenouncement',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newPotentialOwner', type: 'address' }],
    name: 'initiateOwnershipTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'owner', type: 'address' },
      { internalType: 'address', name: 'operator', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'quantity', type: 'uint256' }],
    name: 'mint',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'mintEnd',
    outputs: [{ internalType: 'uint40', name: '', type: 'uint40' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'mintStart',
    outputs: [{ internalType: 'uint40', name: '', type: 'uint40' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ownershipStatus',
    outputs: [{ internalType: 'enum IOwnableTwoSteps.Status', name: '', type: 'uint8' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'potentialOwner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'uint256', name: 'quantity', type: 'uint256' },
    ],
    name: 'premint',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocolFeeBp',
    outputs: [{ internalType: 'uint16', name: '', type: 'uint16' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocolFeeRecipient',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'requestId', type: 'uint256' }],
    name: 'randomnessRequests',
    outputs: [
      {
        internalType: 'enum IInfiltration.RandomnessRequestStatus',
        name: 'status',
        type: 'uint8',
      },
      { internalType: 'uint40', name: 'roundId', type: 'uint40' },
      { internalType: 'uint256', name: 'randomWord', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'requestId', type: 'uint256' },
      { internalType: 'uint256[]', name: 'randomWords', type: 'uint256[]' },
    ],
    name: 'rawFulfillRandomWords',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'from', type: 'address' },
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'uint256', name: 'tokenId', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'from', type: 'address' },
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'uint256', name: 'tokenId', type: 'uint256' },
      { internalType: 'bytes', name: '_data', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint256', name: 'secondaryPrizePoolAmount', type: 'uint256' },
      { internalType: 'uint256', name: 'placement', type: 'uint256' },
    ],
    name: 'secondaryPrizePoolShareAmount',
    outputs: [{ internalType: 'uint256', name: 'shareAmount', type: 'uint256' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'placement', type: 'uint256' }],
    name: 'secondaryPrizePoolShareBp',
    outputs: [{ internalType: 'uint256', name: 'share', type: 'uint256' }],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'operator', type: 'address' },
      { internalType: 'bool', name: 'approved', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'uint40', name: 'newMintStart', type: 'uint40' },
      { internalType: 'uint40', name: 'newMintEnd', type: 'uint40' },
    ],
    name: 'setMintPeriod',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  { inputs: [], name: 'startGame', outputs: [], stateMutability: 'nonpayable', type: 'function' },
  {
    inputs: [],
    name: 'startNewRound',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ internalType: 'string', name: '', type: 'string' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'from', type: 'address' },
      { internalType: 'address', name: 'to', type: 'address' },
      { internalType: 'uint256', name: 'tokenId', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint16', name: '', type: 'uint16' }],
    name: 'updateProtocolFeeBp',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'updateProtocolFeeRecipient',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;
